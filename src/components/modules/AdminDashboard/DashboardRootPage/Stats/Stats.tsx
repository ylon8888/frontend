'use client';

import Loading from '@/components/ui/core/Loading/Loading';
import { useGetStatsQuery } from '@/redux/features/student/student.api';

// Map of icon names to their components
const iconMap = {
  users: (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="25"
      viewBox="0 0 24 25"
      fill="none"
    >
      <path
        d="M12 13.4091C15.0125 13.4091 17.4545 10.967 17.4545 7.95454C17.4545 4.94208 15.0125 2.5 12 2.5C8.98755 2.5 6.54547 4.94208 6.54547 7.95454C6.54547 10.967 8.98755 13.4091 12 13.4091Z"
        fill="#0B7077"
      />
      <path
        d="M19.7627 16.3674C18.9034 15.9266 17.5344 15.3083 15.8974 14.8666C15.6701 14.8027 15.4304 14.9292 15.3513 15.152L13.4882 20.3498L12.9242 17.5286L13.7951 14.9159C13.8179 14.8475 13.8241 14.7746 13.8132 14.7034C13.8022 14.6321 13.7744 14.5645 13.7321 14.5061C13.6901 14.4477 13.6347 14.4001 13.5707 14.3673C13.5066 14.3345 13.4356 14.3174 13.3636 14.3175H10.6364C10.5644 14.3174 10.4934 14.3345 10.4293 14.3673C10.3653 14.4001 10.3099 14.4477 10.2679 14.5061C10.2256 14.5645 10.1978 14.6321 10.1868 14.7034C10.1759 14.7746 10.1821 14.8475 10.2049 14.9159L11.0758 17.5286L10.5118 20.3498L8.64865 15.152C8.56965 14.9292 8.32905 14.8031 8.10265 14.8666C6.46556 15.3083 5.0966 15.9266 4.23726 16.3674C2.8576 17.0759 2 18.4741 2 20.0157V20.6811C2 21.6839 2.81588 22.4993 3.81819 22.4993H20.1818C21.1841 22.4993 22 21.6839 22 20.6811V20.0157C22 18.4741 21.1424 17.0759 19.7627 16.3674Z"
        fill="#0B7077"
      />
    </svg>
  ),
  graduationCap: (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="25"
      viewBox="0 0 24 25"
      fill="none"
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M16.25 19.992V21.25C16.25 21.664 15.914 22 15.5 22C15.086 22 14.75 21.664 14.75 21.25V20H16C16.084 20 16.167 19.997 16.25 19.992Z"
        fill="#0B7077"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M14.75 20H8C5.929 20 4.25 18.321 4.25 16.25V13.168L9.964 16.325C11.202 17.009 12.798 17.009 14.036 16.325L14.75 15.931V20ZM16.25 15.102L19.75 13.168V16.25C19.75 18.237 18.205 19.863 16.25 19.992V15.102Z"
        fill="#0B7077"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M14.75 14.788L13.552 15.45C12.608 15.972 11.392 15.972 10.448 15.45L2.134 10.856C1.568 10.543 1.25 9.995 1.25 9.422C1.25 8.848 1.568 8.3 2.134 7.988L10.448 3.393C11.392 2.872 12.608 2.872 13.552 3.393L21.866 7.988C22.432 8.3 22.75 8.848 22.75 9.422C22.75 9.995 22.432 10.543 21.866 10.856L16.25 13.959V13.25C16.25 13.051 16.171 12.86 16.03 12.72L12.53 9.22C12.238 8.927 11.762 8.927 11.47 9.22C11.177 9.512 11.177 9.988 11.47 10.28L14.75 13.561V14.788Z"
        fill="#0B7077"
      />
    </svg>
  ),
  userPlus: (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="25"
      viewBox="0 0 24 25"
      fill="none"
    >
      <path
        d="M4.65963 18.9624C4.65963 17.2066 5.29814 15.6103 6.25589 14.4131C5.85683 14.2535 5.37795 14.1737 4.97889 14.1737C2.66431 14.1737 0.748807 16.0892 0.748807 18.4037C0.668994 18.8826 1.06806 19.2817 1.54694 19.2817H4.57982C4.65963 19.2019 4.65963 19.0422 4.65963 18.9624Z"
        fill="#0B7077"
      />
      <path
        d="M5.05872 13.6948C6.25591 13.6948 7.29347 12.9765 7.69254 11.9389C7.05404 11.061 6.73478 10.0234 6.73478 8.82621C6.73478 8.74639 6.73478 8.66658 6.73478 8.50695C6.25591 8.1877 5.69722 7.94827 5.05872 7.94827C3.46246 7.94827 2.26527 9.22527 2.26527 10.8215C2.18545 12.4178 3.46246 13.6948 5.05872 13.6948Z"
        fill="#0B7077"
      />
      <path
        d="M18.9461 14.1737C18.4672 14.1737 18.0681 14.2535 17.6691 14.4131C18.7066 15.6901 19.2653 17.2066 19.2653 18.9624V19.2817H22.378C22.8569 19.2817 23.256 18.8826 23.1762 18.4037C23.1762 16.0892 21.2606 14.1737 18.9461 14.1737Z"
        fill="#0B7077"
      />
      <path
        d="M18.9461 13.6948C20.5424 13.6948 21.7396 12.4178 21.7396 10.8215C21.7396 9.22527 20.4626 7.94827 18.9461 7.94827C18.3076 7.94827 17.7489 8.10789 17.2701 8.50695V8.82621C17.2701 9.94358 16.871 11.061 16.3123 11.9389C16.7912 12.9765 17.7489 13.6948 18.9461 13.6948Z"
        fill="#0B7077"
      />
      <path
        d="M12.0025 13.2957C8.88977 13.2957 6.25595 15.8497 6.25595 19.0422C6.17614 19.5211 6.5752 20 7.05408 20H16.8711C17.3499 20 17.749 19.5211 17.6692 19.0422C17.749 15.8497 15.1152 13.2957 12.0025 13.2957Z"
        fill="#0B7077"
      />
      <path
        d="M12.0024 12.5774C14.0775 12.5774 15.7536 10.9013 15.7536 8.82621C15.7536 6.75107 14.0775 5.075 12.0024 5.075C9.92723 5.075 8.25116 6.75107 8.25116 8.82621C8.25116 10.9013 9.92723 12.5774 12.0024 12.5774Z"
        fill="#0B7077"
      />
    </svg>
  ),
  lightbulb: (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="25"
      viewBox="0 0 24 25"
      fill="none"
    >
      <g clipPath="url(#clip0_282_1251)">
        <path
          d="M0.73999 3.59397L1.73411 2.59985L3.80404 4.66978L2.80992 5.6639L0.73999 3.59397Z"
          fill="#0B7077"
        />
        <path d="M0 7.53125H2.86214V8.9375H0V7.53125Z" fill="#0B7077" />
        <path
          d="M0.755615 12.8572L2.82349 10.7893L3.81761 11.7834L1.74973 13.8513L0.755615 12.8572Z"
          fill="#0B7077"
        />
        <path
          d="M20.1926 4.67184L22.2626 2.60191L23.2567 3.59603L21.1867 5.66596L20.1926 4.67184Z"
          fill="#0B7077"
        />
        <path d="M21.1378 7.53125H24V8.9375H21.1378V7.53125Z" fill="#0B7077" />
        <path
          d="M20.1774 11.7855L21.1715 10.7913L23.2394 12.8592L22.2452 13.8533L20.1774 11.7855Z"
          fill="#0B7077"
        />
        <path
          d="M12 24.5C13.9384 24.5 15.5156 22.9228 15.5156 20.9844V18.7812H8.48438V20.9844C8.48438 22.9228 10.0616 24.5 12 24.5Z"
          fill="#0B7077"
        />
        <path
          d="M19.6163 6.86862C18.9777 3.17862 15.7745 0.5 12 0.5C8.22556 0.5 5.02236 3.17862 4.38378 6.86933C3.94156 9.42641 4.78686 12.0185 6.64489 13.8017C7.64019 14.7573 8.24511 16.0337 8.41137 17.375H15.5888C15.7553 16.0331 16.3601 14.7571 17.3552 13.8017C19.2132 12.0185 20.0585 9.42641 19.6163 6.86862ZM12.7032 13.1562H11.2969V11.75H12.7032V13.1562ZM13.2498 8.52748C12.9075 8.77953 12.7032 9.18322 12.7032 9.60744V10.3438H11.2969V9.60744C11.2969 8.73805 11.7153 7.91103 12.416 7.39508C12.5985 7.26073 12.7032 7.05411 12.7032 6.82812C12.7032 6.44042 12.3877 6.125 12 6.125C11.6123 6.125 11.2969 6.44042 11.2969 6.82812V7.53125H9.89066V6.82812C9.89066 5.66502 10.8369 4.71875 12 4.71875C13.1631 4.71875 14.1094 5.66502 14.1094 6.82812C14.1094 7.49591 13.7881 8.1312 13.2498 8.52748Z"
          fill="#0B7077"
        />
      </g>
      <defs>
        <clipPath id="clip0_282_1251">
          <rect
            width="24"
            height="24"
            fill="white"
            transform="translate(0 0.5)"
          />
        </clipPath>
      </defs>
    </svg>
  ),
};

// Define the type after `iconMap` is declared
type StatCardData = {
  id: number;
  value: string;
  label: string;
  icon: keyof typeof iconMap;
};

type DashboardStats = {
  student: number;
  totalCourse: number;
  newEnroll: number;
  correctAnswer: number;
};

const Stats = () => {
  const { data: response, isLoading, isFetching } = useGetStatsQuery(undefined);

  const stats = response?.data as DashboardStats;

  // Example usage
  const statData: StatCardData[] = [
    {
      id: 1,
      value: String(stats?.student ?? 0),
      label: 'Total Students',
      icon: 'users',
    },
    {
      id: 2,
      value: String(stats?.totalCourse ?? 0),
      label: 'Total Courses',
      icon: 'graduationCap',
    },
    {
      id: 3,
      value: String(stats?.newEnroll ?? 0),
      label: 'New Enrollments',
      icon: 'userPlus',
    },
    {
      id: 4,
      value: `${String(stats?.correctAnswer?.toFixed(2) ?? 0)}%`,
      label: 'Correct Answer Rate',
      icon: 'lightbulb',
    },
  ];

  return (
    <div className="w-full">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {isLoading || isFetching
          ? Array.from({ length: 4 }).map((_, idx) => (
              <div
                key={idx}
                className="bg-white rounded-lg shadow-sm p-6 flex flex-col animate-pulse"
              >
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gray-200 rounded-full" />
                  <div className="h-8 w-20 bg-gray-200 rounded" />
                </div>
                <div className="h-4 w-32 bg-gray-200 rounded mt-2" />
              </div>
            ))
          : statData?.map((stat) => (
              <div
                key={stat.id}
                className="bg-white rounded-lg shadow-sm p-6 flex flex-col"
              >
                <div className="flex items-center gap-3">
                  {iconMap[stat.icon]}
                  <span className="text-3xl font-bold text-gray-900">
                    {stat.value ?? 'N/A'}
                  </span>
                </div>
                <span className="text-gray-500 mt-2 text-base">
                  {stat.label}
                </span>
              </div>
            ))}
      </div>
    </div>
  );
};

export default Stats;
